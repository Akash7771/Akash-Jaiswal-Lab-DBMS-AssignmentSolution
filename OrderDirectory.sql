Create Database if not exists `order_directory` ;
use `order_directory`;
-- 1. 
create table if not exists `SUPPLIER`(
`SUPP_ID` int primary key,
`SUPP_NAME` varchar(50) ,
`SUPP_CITY` varchar(50),
`SUPP_PHONE` varchar(10)	
);

CREATE TABLE IF NOT EXISTS `CUSTOMER` (
  `CUS_ID` INT NOT NULL,
  `CUS_NAME` VARCHAR(20) NULL DEFAULT NULL,
  `CUS_PHONE` VARCHAR(10),
  `CUS_CITY` varchar(30) ,
  `CUS_GENDER` CHAR,
  PRIMARY KEY (`CUS_ID`)
 );

 CREATE TABLE IF NOT EXISTS `CATEGORY` (
  `CAT_ID` INT NOT NULL,
  `CAT_NAME` VARCHAR(20) NULL DEFAULT NULL,
   PRIMARY KEY (`CAT_ID`)
  );

  CREATE TABLE IF NOT EXISTS `PRODUCT` (
  `PRO_ID` INT NOT NULL,
  `PRO_NAME` VARCHAR(20) NULL DEFAULT NULL,
  `PRO_DESC` VARCHAR(60) NULL DEFAULT NULL,
  `CAT_ID` INT NOT NULL,
  PRIMARY KEY (`PRO_ID`),
  FOREIGN KEY (`CAT_ID`) REFERENCES CATEGORY (`CAT_ID`)  
  );

 CREATE TABLE IF NOT EXISTS `PRODUCT_DETAILS` (
  `PROD_ID` INT NOT NULL,
  `PRO_ID` INT NOT NULL,
  `SUPP_ID` INT NOT NULL,
  `PROD_PRICE` INT NOT NULL,
  PRIMARY KEY (`PROD_ID`),
  FOREIGN KEY (`PRO_ID`) REFERENCES PRODUCT (`PRO_ID`),
  FOREIGN KEY (`SUPP_ID`) REFERENCES SUPPLIER(`SUPP_ID`)  
  );
 
CREATE TABLE IF NOT EXISTS `ORDER` (
  `ORD_ID` INT NOT NULL,
  `ORD_AMOUNT` INT NOT NULL,
  `ORD_DATE` DATE,
  `CUS_ID` INT NOT NULL,
  `PROD_ID` INT NOT NULL,
  PRIMARY KEY (`ORD_ID`),
  FOREIGN KEY (`CUS_ID`) REFERENCES CUSTOMER(`CUS_ID`),
  FOREIGN KEY (`PROD_ID`) REFERENCES PRODUCT_DETAILS(`PROD_ID`)
  );

CREATE TABLE IF NOT EXISTS `RATING` (
  `RAT_ID` INT NOT NULL,
  `CUS_ID` INT NOT NULL,
  `SUPP_ID` INT NOT NULL,
  `RAT_RATSTARS` INT NOT NULL,
  PRIMARY KEY (`RAT_ID`),
  FOREIGN KEY (`SUPP_ID`) REFERENCES SUPPLIER (`SUPP_ID`),
  FOREIGN KEY (`CUS_ID`) REFERENCES CUSTOMER(`CUS_ID`)
  ); 

-- 2. 

insert into `SUPPLIER` values(1,"Rajesh Retails","Delhi",'1234567890');
insert into `SUPPLIER` values(2,"Appario Ltd.","Mumbai",'2589631470');
insert into `SUPPLIER` values(3,"Knome products","Banglore",'9785462315');
insert into `SUPPLIER` values(4,"Bansal Retails","Kochi",'8975463285');
insert into `SUPPLIER` values(5,"Mittal Ltd.","Lucknow",'7898456532');
  
INSERT INTO `CUSTOMER` VALUES(1,"AAKASH",'9999999999',"DELHI",'M');
INSERT INTO `CUSTOMER` VALUES(2,"AMAN",'9785463215',"NOIDA",'M');
INSERT INTO `CUSTOMER` VALUES(3,"NEHA",'9999999999',"MUMBAI",'F');
INSERT INTO `CUSTOMER` VALUES(4,"MEGHA",'9994562399',"KOLKATA",'F');
INSERT INTO `CUSTOMER` VALUES(5,"PULKIT",'7895999999',"LUCKNOW",'M');
  
INSERT INTO `CATEGORY` VALUES( 1,"BOOKS");
INSERT INTO `CATEGORY` VALUES(2,"GAMES");
INSERT INTO `CATEGORY` VALUES(3,"GROCERIES");
INSERT INTO `CATEGORY` VALUES (4,"ELECTRONICS");
INSERT INTO `CATEGORY` VALUES(5,"CLOTHES");
  
INSERT INTO `PRODUCT` VALUES(1,"GTA V","DFJDJFDJFDJFDJFJF",2);
INSERT INTO `PRODUCT` VALUES(2,"TSHIRT","DFDFJDFJDKFD",5);
INSERT INTO `PRODUCT` VALUES(3,"ROG LAPTOP","DFNTTNTNTERND",4);
INSERT INTO `PRODUCT` VALUES(4,"OATS","REURENTBTOTH",3);
INSERT INTO `PRODUCT` VALUES(5,"HARRY POTTER","NBEMCTHTJTH",1);
  
INSERT INTO PRODUCT_DETAILS VALUES(1,1,2,1500);
INSERT INTO PRODUCT_DETAILS VALUES(2,3,5,30000);
INSERT INTO PRODUCT_DETAILS VALUES(3,5,1,3000);
INSERT INTO PRODUCT_DETAILS VALUES(4,2,3,2500);
INSERT INTO PRODUCT_DETAILS VALUES(5,4,1,1000);
  
INSERT INTO `ORDER` VALUES (50,2000,"2021-10-06",2,1);
INSERT INTO `ORDER` VALUES(20,1500,"2021-10-12",3,5);
INSERT INTO `ORDER` VALUES(25,30500,"2021-09-16",5,2);
INSERT INTO `ORDER` VALUES(26,2000,"2021-10-05",1,1);
INSERT INTO `ORDER` VALUES(30,3500,"2021-08-16",4,3);

INSERT INTO `RATING` VALUES(1,2,2,4);
INSERT INTO `RATING` VALUES(2,3,4,3);
INSERT INTO `RATING` VALUES(3,5,1,5);
INSERT INTO `RATING` VALUES(4,1,3,2);
INSERT INTO `RATING` VALUES(5,4,5,4);


-- 3. gender wise customers count who purchased order >= 3000
SELECT COUNT(1) CUSTOMER_COUNT , C.CUS_GENDER GENDER 
FROM CUSTOMER C JOIN `ORDER` O ON C.CUS_ID = O.CUS_ID 
where O.ORD_AMOUNT >=3000 group by C.CUS_GENDER;

-- 4. Display order details with product name of customer_id = 2
SELECT O.CUS_ID , O.ORD_DATE ORDER_DATE ,
P.PRO_NAME PRODUCT_NAME , P.PRO_DESC PRODUCT_DESCRIPTION , O.ORD_AMOUNT ORDER_AMOUNT 
FROM `ORDER` O 
JOIN PRODUCT_DETAILS PD ON (O.PROD_ID = PD.PROD_ID)
JOIN PRODUCT P ON ( P.PRO_ID = PD.PRO_ID)
WHERE O.CUS_ID = 2;


-- 5. display supplier who can sell more then 1 product

SELECT  *
FROM SUPPLIER S 
JOIN (
	SELECT COUNT(1) , SUPP_ID FROM PRODUCT_DETAILS P  GROUP BY SUPP_ID HAVING COUNT(1)>1
) AS SD
ON S.SUPP_ID = SD.SUPP_ID ;


#6. Find Category of the product with order amount is minimum.

SELECT  C.CAT_NAME
FROM `ORDER` O
JOIN PRODUCT_DETAILS PD ON O.PROD_ID = PD.PROD_ID
JOIN PRODUCT P ON (PD.PRO_ID = P.PRO_id)
JOIN CATEGORY C ON P.CAT_ID = C.CAT_ID
WHERE O.ORD_AMOUNT = (
	SELECT MIN(Q.ORD_AMOUNT)
	FROM`ORDER` Q
);


 -- 7. Display the Id and Name of the Product ordered after “2021-10-05”.

SELECT 
    P.PRO_ID, P.PRO_NAME
FROM
    `ORDER` O
        JOIN
    PRODUCT_DETAILS PD ON (O.PROD_ID = PD.PROD_ID)
        JOIN
    PRODUCT P ON (P.PRO_ID = PD.PRO_ID)
WHERE
    O.ORD_DATE > '2021-10-05';

-- 8. Print the top 3 supplier name and id and rating on the basis of their rating along with the customer name who has given the rating.

SELECT S.SUPP_ID , S.SUPP_NAME , C.CUS_NAME , R.RAT_RATSTARS
FROM RATING R 
JOIN SUPPLIER S ON (R.SUPP_ID = S.SUPP_ID)
JOIN CUSTOMER C ON (R.CUS_ID = C.CUS_ID)
ORDER BY R.RAT_RATSTARS DESC
LIMIT 3;


-- 9. Display customer name and gender whose names start or end with character 'A'.

SELECT 
    C.CUS_NAME, C.CUS_GENDER
FROM
    CUSTOMER C
WHERE
    C.CUS_NAME LIKE 'A%'
        OR C.CUS_NAME LIKE '%A';

-- 10. Display the total order amount of the male customers.

SELECT 
    SUM(O.ORD_AMOUNT) TOTAL_ORDER_AMOUNT
FROM
    `ORDER` O
        JOIN
    CUSTOMER C ON (O.CUS_ID = C.CUS_ID)
WHERE
    C.CUS_GENDER = 'M';

-- 11. Display all the Customers left outer join with  the orders.

SELECT * 
FROM CUSTOMER C LEFT OUTER JOIN `ORDER` O ON (C.CUS_ID=O.CUS_ID);

-- 12. 
#Create a stored procedure to display the Rating for a Supplier if any along with the Verdict on that 
#rating if any like if rating >4 then “Genuine Supplier” if rating >2 “Average Supplier” else “Supplier should not be considered”.
/* -- create this procedure
CREATE DEFINER=`localhost`@`%` PROCEDURE `RATING_FOR_SUPPLIER`()
BEGIN

	SELECT S.SUPP_ID , S.SUPP_NAME , R.RAT_RATSTARS ,
		CASE 
			WHEN R.RAT_RATSTARS > 4 THEN 'Genuine Supplier'
			WHEN R.RAT_RATSTARS > 2 THEN 'Average Supplier'
			ELSE 'Supplier should not be considered'
			END  AS VERFICT
	FROM RATING R 
	INNER JOIN SUPPLIER S ON (R.SUPP_ID = S.SUPP_ID) 
    ORDER BY 1 ASC;
	
END
*/
CALL `order_directory`.`RATING_FOR_SUPPLIER`();
